// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from proto/types.proto</summary>
public static partial class TypesReflection {

  #region Descriptor
  /// <summary>File descriptor for proto/types.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TypesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFwcm90by90eXBlcy5wcm90byJzChFDaGF0Q29tcG9uZW50VHlwZRIMCgR0",
          "ZXh0GAEgASgJEgwKBGZvbnQYAiABKAkSDQoFY29sb3IYAyABKAkSEwoLbGlu",
          "ZXRocm91Z2gYBCABKAgSEQoJdW5kZXJsaW5lGAUgASgIEgsKA3VybBgGIAEo",
          "CSJrChZCYXNpY0NoYXRDb21wb25lbnRUeXBlEgwKBHRleHQYASABKAkSDAoE",
          "Zm9udBgCIAEoCRINCgVjb2xvchgDIAEoCRITCgtsaW5ldGhyb3VnaBgEIAEo",
          "CBIRCgl1bmRlcmxpbmUYBSABKAgilgEKBEl0ZW0SCgoCaWQYASABKAkSDQoF",
          "Y291bnQYAiABKAUSDgoGZGFtYWdlGAMgASgCEh0KBG5hbWUYBCADKAsyDy5J",
          "dGVtLk5hbWVFbnRyeRpECglOYW1lRW50cnkSCwoDa2V5GAEgASgNEiYKBXZh",
          "bHVlGAIgASgLMhcuQmFzaWNDaGF0Q29tcG9uZW50VHlwZToCOAEqQwoNSW52",
          "ZW50b3J5VHlwZRIICgRNQUlOEAASCQoFQVJNT1IQARIJCgVDUkFGVBACEggK",
          "BEhPT0sQAxIICgRURU1QEAQqQQoNQ29udGFpbmVyVHlwZRIKCgZQTEFZRVIQ",
          "ABIJCgVDSEVTVBABEgwKCENSQUZUSU5HEAISCwoHRlVSTkFDRRADKj0KDk1v",
          "dXNlQ2xpY2tUeXBlEggKBExFRlQQABIJCgVSSUdIVBABEgoKBk1JRERMRRAC",
          "EgoKBlNFTEVDVBADYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::InventoryType), typeof(global::ContainerType), typeof(global::MouseClickType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ChatComponentType), global::ChatComponentType.Parser, new[]{ "Text", "Font", "Color", "Linethrough", "Underline", "Url" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BasicChatComponentType), global::BasicChatComponentType.Parser, new[]{ "Text", "Font", "Color", "Linethrough", "Underline" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Item), global::Item.Parser, new[]{ "Id", "Count", "Damage", "Name" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Enums
public enum InventoryType {
  [pbr::OriginalName("MAIN")] Main = 0,
  [pbr::OriginalName("ARMOR")] Armor = 1,
  [pbr::OriginalName("CRAFT")] Craft = 2,
  [pbr::OriginalName("HOOK")] Hook = 3,
  [pbr::OriginalName("TEMP")] Temp = 4,
}

public enum ContainerType {
  [pbr::OriginalName("PLAYER")] Player = 0,
  [pbr::OriginalName("CHEST")] Chest = 1,
  [pbr::OriginalName("CRAFTING")] Crafting = 2,
  [pbr::OriginalName("FURNACE")] Furnace = 3,
}

public enum MouseClickType {
  [pbr::OriginalName("LEFT")] Left = 0,
  [pbr::OriginalName("RIGHT")] Right = 1,
  [pbr::OriginalName("MIDDLE")] Middle = 2,
  [pbr::OriginalName("SELECT")] Select = 3,
}

#endregion

#region Messages
public sealed partial class ChatComponentType : pb::IMessage<ChatComponentType>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ChatComponentType> _parser = new pb::MessageParser<ChatComponentType>(() => new ChatComponentType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChatComponentType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TypesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatComponentType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatComponentType(ChatComponentType other) : this() {
    text_ = other.text_;
    font_ = other.font_;
    color_ = other.color_;
    linethrough_ = other.linethrough_;
    underline_ = other.underline_;
    url_ = other.url_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatComponentType Clone() {
    return new ChatComponentType(this);
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 1;
  private string text_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return text_; }
    set {
      text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "font" field.</summary>
  public const int FontFieldNumber = 2;
  private string font_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Font {
    get { return font_; }
    set {
      font_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 3;
  private string color_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Color {
    get { return color_; }
    set {
      color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "linethrough" field.</summary>
  public const int LinethroughFieldNumber = 4;
  private bool linethrough_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Linethrough {
    get { return linethrough_; }
    set {
      linethrough_ = value;
    }
  }

  /// <summary>Field number for the "underline" field.</summary>
  public const int UnderlineFieldNumber = 5;
  private bool underline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Underline {
    get { return underline_; }
    set {
      underline_ = value;
    }
  }

  /// <summary>Field number for the "url" field.</summary>
  public const int UrlFieldNumber = 6;
  private string url_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Url {
    get { return url_; }
    set {
      url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChatComponentType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChatComponentType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Text != other.Text) return false;
    if (Font != other.Font) return false;
    if (Color != other.Color) return false;
    if (Linethrough != other.Linethrough) return false;
    if (Underline != other.Underline) return false;
    if (Url != other.Url) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    if (Font.Length != 0) hash ^= Font.GetHashCode();
    if (Color.Length != 0) hash ^= Color.GetHashCode();
    if (Linethrough != false) hash ^= Linethrough.GetHashCode();
    if (Underline != false) hash ^= Underline.GetHashCode();
    if (Url.Length != 0) hash ^= Url.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
    if (Font.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Font);
    }
    if (Color.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Color);
    }
    if (Linethrough != false) {
      output.WriteRawTag(32);
      output.WriteBool(Linethrough);
    }
    if (Underline != false) {
      output.WriteRawTag(40);
      output.WriteBool(Underline);
    }
    if (Url.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Url);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
    if (Font.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Font);
    }
    if (Color.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Color);
    }
    if (Linethrough != false) {
      output.WriteRawTag(32);
      output.WriteBool(Linethrough);
    }
    if (Underline != false) {
      output.WriteRawTag(40);
      output.WriteBool(Underline);
    }
    if (Url.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Url);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (Font.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Font);
    }
    if (Color.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
    }
    if (Linethrough != false) {
      size += 1 + 1;
    }
    if (Underline != false) {
      size += 1 + 1;
    }
    if (Url.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChatComponentType other) {
    if (other == null) {
      return;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
    if (other.Font.Length != 0) {
      Font = other.Font;
    }
    if (other.Color.Length != 0) {
      Color = other.Color;
    }
    if (other.Linethrough != false) {
      Linethrough = other.Linethrough;
    }
    if (other.Underline != false) {
      Underline = other.Underline;
    }
    if (other.Url.Length != 0) {
      Url = other.Url;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
        case 18: {
          Font = input.ReadString();
          break;
        }
        case 26: {
          Color = input.ReadString();
          break;
        }
        case 32: {
          Linethrough = input.ReadBool();
          break;
        }
        case 40: {
          Underline = input.ReadBool();
          break;
        }
        case 50: {
          Url = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
        case 18: {
          Font = input.ReadString();
          break;
        }
        case 26: {
          Color = input.ReadString();
          break;
        }
        case 32: {
          Linethrough = input.ReadBool();
          break;
        }
        case 40: {
          Underline = input.ReadBool();
          break;
        }
        case 50: {
          Url = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class BasicChatComponentType : pb::IMessage<BasicChatComponentType>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<BasicChatComponentType> _parser = new pb::MessageParser<BasicChatComponentType>(() => new BasicChatComponentType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BasicChatComponentType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TypesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BasicChatComponentType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BasicChatComponentType(BasicChatComponentType other) : this() {
    text_ = other.text_;
    font_ = other.font_;
    color_ = other.color_;
    linethrough_ = other.linethrough_;
    underline_ = other.underline_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BasicChatComponentType Clone() {
    return new BasicChatComponentType(this);
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 1;
  private string text_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return text_; }
    set {
      text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "font" field.</summary>
  public const int FontFieldNumber = 2;
  private string font_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Font {
    get { return font_; }
    set {
      font_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 3;
  private string color_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Color {
    get { return color_; }
    set {
      color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "linethrough" field.</summary>
  public const int LinethroughFieldNumber = 4;
  private bool linethrough_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Linethrough {
    get { return linethrough_; }
    set {
      linethrough_ = value;
    }
  }

  /// <summary>Field number for the "underline" field.</summary>
  public const int UnderlineFieldNumber = 5;
  private bool underline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Underline {
    get { return underline_; }
    set {
      underline_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BasicChatComponentType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BasicChatComponentType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Text != other.Text) return false;
    if (Font != other.Font) return false;
    if (Color != other.Color) return false;
    if (Linethrough != other.Linethrough) return false;
    if (Underline != other.Underline) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    if (Font.Length != 0) hash ^= Font.GetHashCode();
    if (Color.Length != 0) hash ^= Color.GetHashCode();
    if (Linethrough != false) hash ^= Linethrough.GetHashCode();
    if (Underline != false) hash ^= Underline.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
    if (Font.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Font);
    }
    if (Color.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Color);
    }
    if (Linethrough != false) {
      output.WriteRawTag(32);
      output.WriteBool(Linethrough);
    }
    if (Underline != false) {
      output.WriteRawTag(40);
      output.WriteBool(Underline);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
    if (Font.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Font);
    }
    if (Color.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Color);
    }
    if (Linethrough != false) {
      output.WriteRawTag(32);
      output.WriteBool(Linethrough);
    }
    if (Underline != false) {
      output.WriteRawTag(40);
      output.WriteBool(Underline);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (Font.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Font);
    }
    if (Color.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
    }
    if (Linethrough != false) {
      size += 1 + 1;
    }
    if (Underline != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BasicChatComponentType other) {
    if (other == null) {
      return;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
    if (other.Font.Length != 0) {
      Font = other.Font;
    }
    if (other.Color.Length != 0) {
      Color = other.Color;
    }
    if (other.Linethrough != false) {
      Linethrough = other.Linethrough;
    }
    if (other.Underline != false) {
      Underline = other.Underline;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
        case 18: {
          Font = input.ReadString();
          break;
        }
        case 26: {
          Color = input.ReadString();
          break;
        }
        case 32: {
          Linethrough = input.ReadBool();
          break;
        }
        case 40: {
          Underline = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
        case 18: {
          Font = input.ReadString();
          break;
        }
        case 26: {
          Color = input.ReadString();
          break;
        }
        case 32: {
          Linethrough = input.ReadBool();
          break;
        }
        case 40: {
          Underline = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Item : pb::IMessage<Item>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Item> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TypesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Item() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Item(Item other) : this() {
    id_ = other.id_;
    count_ = other.count_;
    damage_ = other.damage_;
    name_ = other.name_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Item Clone() {
    return new Item(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 3;
  private float damage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private static readonly pbc::MapField<uint, global::BasicChatComponentType>.Codec _map_name_codec
      = new pbc::MapField<uint, global::BasicChatComponentType>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::BasicChatComponentType.Parser), 34);
  private readonly pbc::MapField<uint, global::BasicChatComponentType> name_ = new pbc::MapField<uint, global::BasicChatComponentType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<uint, global::BasicChatComponentType> Name {
    get { return name_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Item);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Item other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Count != other.Count) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
    if (!Name.Equals(other.Name)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
    hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (Damage != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Damage);
    }
    name_.WriteTo(output, _map_name_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (Damage != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Damage);
    }
    name_.WriteTo(ref output, _map_name_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Damage != 0F) {
      size += 1 + 4;
    }
    size += name_.CalculateSize(_map_name_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Item other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Damage != 0F) {
      Damage = other.Damage;
    }
    name_.Add(other.name_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 29: {
          Damage = input.ReadFloat();
          break;
        }
        case 34: {
          name_.AddEntriesFrom(input, _map_name_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 29: {
          Damage = input.ReadFloat();
          break;
        }
        case 34: {
          name_.AddEntriesFrom(ref input, _map_name_codec);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
